{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT","goodsFromServer","App","useState","sortField","setSortField","toReverse","setToReverse","handleSort","field","visibleGoods","goods","isReversed","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"mPAKMA,EACY,sBADZA,EAEO,iBAFPA,EAGE,OAGKC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAM,WACjB,MAAkCC,mBAASH,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KA4BMC,EAAa,SAAAC,GAAK,OAAI,WAC1BJ,EAAaI,KAQTC,EAnCmB,SAACC,EAAD,GACc,IAApCF,EAAmC,EADHL,UACdQ,EAAiB,EAA5BN,UACFO,EAAa,YAAOF,GAqB1B,OAnBIF,IAAUT,GACZa,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQP,GACN,KAAKT,EACH,OAAOe,EAAME,cAAcD,GAE7B,KAAKhB,EACH,OAAOe,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXN,GACFC,EAAcM,UAGTN,EAYYO,CAAiBnB,EACpC,CAAEG,YAAWE,cAEf,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAASd,EAAWR,GACpBuB,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYpB,IAAcJ,IAJ9B,SAOGA,IAGH,wBACEsB,QAASd,EAAWR,GACpBuB,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYpB,IAAcJ,IAJ9B,SAOGA,IAGH,wBACEsB,QAAS,kBAAMf,GAAcD,IAC7BiB,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,YAAalB,IAJjB,sBAUEF,IAAcJ,GAAaM,IAC3B,wBACEgB,QA3CU,WAClBjB,EAAaL,GACbO,GAAa,IA0CLgB,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGX,EAAae,KAAI,SAAAC,GAAI,OAAK,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC5G3DC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.eacb7b96.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport { useState } from 'react';\nimport cn from 'classnames';\nimport './App.scss';\n\nconst SORT = {\n  ALPHABETICALLY: 'Sort alphabetically',\n  BY_LENGTH: 'Sort by length',\n  NONE: 'none',\n};\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SORT.NONE);\n  const [toReverse, setToReverse] = useState(false);\n\n  const getPreparedGoods = (goods, { sortField:\n     field, toReverse: isReversed }) => {\n    const preparedGoods = [...goods];\n\n    if (field !== SORT.NONE) {\n      preparedGoods.sort((good1, good2) => {\n        switch (field) {\n          case SORT.ALPHABETICALLY:\n            return good1.localeCompare(good2);\n\n          case SORT.BY_LENGTH:\n            return good1.length - good2.length;\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (isReversed) {\n      preparedGoods.reverse();\n    }\n\n    return preparedGoods;\n  };\n\n  const handleSort = field => () => {\n    setSortField(field);\n  };\n\n  const handleReset = () => {\n    setSortField(SORT.NONE);\n    setToReverse(false);\n  };\n\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, toReverse });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={handleSort(SORT.ALPHABETICALLY)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SORT.ALPHABETICALLY,\n          })}\n        >\n          {SORT.ALPHABETICALLY}\n        </button>\n\n        <button\n          onClick={handleSort(SORT.BY_LENGTH)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SORT.BY_LENGTH,\n          })}\n        >\n          {SORT.BY_LENGTH}\n        </button>\n\n        <button\n          onClick={() => setToReverse(!toReverse)}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !toReverse,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== SORT.NONE || toReverse) && (\n          <button\n            onClick={handleReset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (<li data-cy=\"Good\" key={good}>{good}</li>))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}